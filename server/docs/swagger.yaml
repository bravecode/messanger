basePath: /
definitions:
  types.AccessResponse:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  types.AuthResponse:
    properties:
      auth:
        $ref: '#/definitions/types.AccessResponse'
      user:
        $ref: '#/definitions/types.UserResponse'
    required:
    - auth
    - user
    type: object
  types.ErrorResponse:
    properties:
      errors:
        items:
          type: string
        type: array
    type: object
  types.LoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  types.RegisterDTO:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  types.RelationshipResponse:
    properties:
      friends:
        items:
          $ref: '#/definitions/types.RelationshipResponseItem'
        type: array
      incoming_requests:
        items:
          $ref: '#/definitions/types.RelationshipResponseItem'
        type: array
      outgoing_requests:
        items:
          $ref: '#/definitions/types.RelationshipResponseItem'
        type: array
    required:
    - friends
    - incoming_requests
    - outgoing_requests
    type: object
  types.RelationshipResponseItem:
    properties:
      id:
        type: integer
      user_id:
        type: integer
    required:
    - id
    - user_id
    type: object
  types.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    required:
    - email
    - id
    - username
    type: object
host: localhost:8000
info:
  contact: {}
  description: Learning GO (with Fiber) by creating messanger copy.
  title: Messanger API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/types.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Access your account
      tags:
      - Auth
  /auth/profile:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Fetch info about signed in user
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Register Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/types.RegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Create new account
      tags:
      - Auth
  /relationship:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.RelationshipResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get all relationships for signed in user.
      tags:
      - Relationship
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
